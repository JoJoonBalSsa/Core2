{
    "+": "{a} + (~obj.myFunction(~{b}, 1) + 1)",
    "-": "{a} + obj.myFunction(~{b}, 1)",
    "*": "int resultObfuscated = 0; for(int i = 0; i < {b}; i++) { resultObfuscated += (~obj.myFunction(~{a}, 1) + 1); }",
    "/": "int resultObfuscated = 0; int temp = a; int bInverted = ~obj.myFunction(~b, 1) + 1; while (temp >= bInverted) { temp -= bInverted; resultObfuscated++;}",
    "%": "{a} - (int temp = {a}; int bInverted = ~obj.myFunction(~{b}, 1) + 1; while (temp >= bInverted) { temp -= bInverted; } temp * {b})",
    "++":"", //전위후위 판별필요
    "--":"", //전위후위 판별필요
    "!":"{a} ? ({b} ? false : ({c} ? false : false)) : ({d} ? true : true)",
    "==":"({a} != {b}) ? ({b} ? false : ({c} ? false : false)) : ({d} ? true : true)",
    "!=":"({a} == {b}) ? ({b} ? false : ({c} ? false : false)) : ({d} ? true : true)",
    ">":"obj.myFunction(~{b}, 1)>obj.myFunction(~{a}, 1)",
    "<":"obj.myFunction(~{b}, 1)<obj.myFunction(~{a}, 1)",
    ">=":"!(obj.myFunction(~{b}, 1)>obj.myFunction(~{a}, 1))",
    "<=":"!(obj.myFunction(~{b}, 1)<obj.myFunction(~{a}, 1))",
    "&":"~(~(-{a}-1)|~(-{b}-1))",
    "|":"~(~(-{a}-1)&~(-{b}-1))",
    "^":"~(~(-{a}-1)&~(-{b}-1))&~(~(~(-{a}-1)|~(-{b}-1)))",
    "~":"-{a}-1",
    "<<":"{a}*(int)Math.pow(2, {b})",
    ">>":"{a}/(int)Math.pow(2, {b})",
    ">>>":"({a} & 0x7fffffff)/(int)Math.pow(2, {b})",
    "&&":"({a}?({b}?true:false):false)",
    "||":"({a}?true:({b}?true:false))",
    "=":"{a}={b}^0",
    "+=":"{a}={a} + (~obj.myFunction(~{b}, 1) + 1)",
    "-=":"{a}={a} + obj.myFunction(~{b}, 1)",
    "*=":"{a}=(int resultObfuscated = 0; for(int i = 0; i < {b}; i++) { resultObfuscated += (~obj.myFunction(~{a}, 1) + 1); })",
    "/=":"{a}=(int resultObfuscated = 0; int temp = a; int bInverted = ~obj.myFunction(~b, 1) + 1; while (temp >= bInverted) { temp -= bInverted; resultObfuscated++;})",
    "%=":"{a}={a} - (int temp = {a}; int bInverted = ~obj.myFunction(~{b}, 1) + 1; while (temp >= bInverted) { temp -= bInverted; } temp * {b})",
    "&=":"{a}=~(~(-{a}-1) | ~(-{b}-1))",
    "|=":"{a}=~(~(-{a}-1) & ~(-{b}-1))",
    "^=":"{a}=~(~(-{a}-1) & ~(-{b}-1)) & ~(~(~(-{a}-1) | ~(-{b}-1)))",
    "<<=":"{a}={a}*(int)Math.pow(2, {b})",
    ">>=":"{a}={a}/(int)Math.pow(2, {b})",
    ">>>=":"{a}=({a} & 0x7fffffff)/(int)Math.pow(2, {b})",
    "?:":"({a} > {b} ? 1 : 0) * {a} + ({a} > {b} ? 0 : 1) * {b}",
    // "instanceof":"try {Class<?> clazz = Class.forName("MyClass"); result = clazz.isInstance(obj);} catch (ClassNotFoundException e) {result = false;}",
    "()":"((MyClass) obj).myFunction({a}, {b})",
    "[]":"java.lang.reflect.Array.getInt(array, index)",
    ".":"",
    "::":"new MyClass().myMethod()"
}