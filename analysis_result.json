[
    {
        "sensitivity": 2,
        "tainted": [
            {
                "file_path": "E:/f_flow/java-christmas-6-scienceNH/src/main/java/christmas/EventControl.java",
                "method_name": "EventControl.inputMenu.readLine",
                "tree_position": "50-59",
                "cut_tree": "Method: inputMenu()\nBody:\nStatementExpression(expression=MethodInvocation(arguments=[], member=orgerGuideMessage, postfix_operators=[], prefix_operators=[], qualifier=EventView, selectors=[], type_arguments=None), label=None)\nLocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=MethodInvocation(arguments=[], member=readLine, postfix_operators=[], prefix_operators=[], qualifier=Console, selectors=[], type_arguments=None), name=menu)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=String, sub_type=None))\nWhileStatement(body=BlockStatement(label=None, statements=[StatementExpression(expression=MethodInvocation(arguments=[], member=eraseOrderedMenu, postfix_operators=[], prefix_operators=[], qualifier=EventModel, selectors=[], type_arguments=None), label=None), StatementExpression(expression=MethodInvocation(arguments=[], member=tryAgainMessage, postfix_operators=[], prefix_operators=[], qualifier=EventView, selectors=[], type_arguments=None), label=None), StatementExpression(expression=Assignment(expressionl=MemberReference(member=menu, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), type==, value=MethodInvocation(arguments=[], member=readLine, postfix_operators=[], prefix_operators=[], qualifier=Console, selectors=[], type_arguments=None)), label=None)]), condition=MethodInvocation(arguments=[MemberReference(member=menu, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=catchMenuError, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[], type_arguments=None), label=None)\nStatementExpression(expression=MethodInvocation(arguments=[], member=printOrderedMenu, postfix_operators=[], prefix_operators=[], qualifier=EventView, selectors=[], type_arguments=None), label=None)",
                "source_code": "    public void inputMenu() {        EventView.orgerGuideMessage();        String menu = Console.readLine();        while (catchMenuError(menu)) {            EventModel.eraseOrderedMenu();            EventView.tryAgainMessage();            menu = Console.readLine();        }        EventView.printOrderedMenu();    }"
            },
            {
                "file_path": "E:/f_flow/java-christmas-6-scienceNH/src/main/java/christmas/EventControl.java",
                "method_name": "EventControl.catchMenuError",
                "tree_position": "60-71",
                "cut_tree": "Method: catchMenuError(String menu)\nBody:\nTryStatement(block=[StatementExpression(expression=MethodInvocation(arguments=[MemberReference(member=menu, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=checkMenuError, postfix_operators=[], prefix_operators=[], qualifier=EventControlError, selectors=[], type_arguments=None), label=None), IfStatement(condition=BinaryOperation(operandl=BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=1), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=2), operator=+), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=3), operator===), else_statement=None, label=None, then_statement=BlockStatement(label=None, statements=[StatementExpression(expression=MethodInvocation(arguments=[MemberReference(member=STRING_LITERALS, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[ArraySelector(index=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0))])], member=println, postfix_operators=[], prefix_operators=[], qualifier=System.out, selectors=[], type_arguments=None), label=None), ReturnStatement(expression=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=false), label=None)])), ReturnStatement(expression=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=false), label=None)], catches=[CatchClause(block=[ReturnStatement(expression=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=true), label=None)], label=None, parameter=CatchClauseParameter(annotations=None, modifiers=None, name=e, types=['IllegalArgumentException']))], finally_block=None, label=None, resources=None)",
                "source_code": "    private boolean catchMenuError(String menu) {        try {            EventControlError.checkMenuError(menu);            if (1 + 2 == 3) {                System.out.println(STRING_LITERALS[0]);                return false;            }            return false;        } catch (IllegalArgumentException e) {            return true;        }    }"
            },
            {
                "file_path": "E:/f_flow/java-christmas-6-scienceNH/src/main/java/christmas/EventControlError.java",
                "method_name": "EventControlError.checkMenuError",
                "tree_position": "33-40",
                "cut_tree": "Method: checkMenuError(String menu)\nBody:\nIfStatement(condition=MethodInvocation(arguments=[MemberReference(member=menu, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=isOneMenu, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[], type_arguments=None), else_statement=None, label=None, then_statement=BlockStatement(label=None, statements=[StatementExpression(expression=MethodInvocation(arguments=[MemberReference(member=menu, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=checkOneMenuErrors, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[], type_arguments=None), label=None), StatementExpression(expression=MethodInvocation(arguments=[MethodInvocation(arguments=[], member=getOrderedMenu, postfix_operators=[], prefix_operators=[], qualifier=EventModel, selectors=[], type_arguments=None)], member=onlyDrinksError, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[], type_arguments=None), label=None), ReturnStatement(expression=None, label=None)]))\nStatementExpression(expression=MethodInvocation(arguments=[MemberReference(member=menu, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=checkManyMenuErrors, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[], type_arguments=None), label=None)",
                "source_code": "    public static void checkMenuError(String menu) {        if (isOneMenu(menu)) {            checkOneMenuErrors(menu);            onlyDrinksError(EventModel.getOrderedMenu());            return;        }        checkManyMenuErrors(menu);    }"
            },
            {
                "file_path": "E:/f_flow/java-christmas-6-scienceNH/src/main/java/christmas/EventControlError.java",
                "method_name": "EventControlError.checkManyMenuErrors",
                "tree_position": "57-63",
                "cut_tree": "Method: checkManyMenuErrors(String menu)\nBody:\nLocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=MethodInvocation(arguments=[MemberReference(member=STRING_LITERALS, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[ArraySelector(index=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=5))])], member=split, postfix_operators=[], prefix_operators=[], qualifier=menu, selectors=[], type_arguments=None), name=menus)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[None], name=String, sub_type=None))\nForStatement(body=BlockStatement(label=None, statements=[StatementExpression(expression=MethodInvocation(arguments=[MemberReference(member=oneMenu, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=checkOneMenuErrors, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[], type_arguments=None), label=None)]), control=EnhancedForControl(iterable=MemberReference(member=menus, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), var=VariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=None, initializer=None, name=oneMenu)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=String, sub_type=None))), label=None)\nStatementExpression(expression=MethodInvocation(arguments=[MethodInvocation(arguments=[], member=getOrderedMenu, postfix_operators=[], prefix_operators=[], qualifier=EventModel, selectors=[], type_arguments=None)], member=onlyDrinksError, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[], type_arguments=None), label=None)",
                "source_code": "    private static void checkManyMenuErrors(String menu) {        String[] menus = menu.split(STRING_LITERALS[5]);        for (String oneMenu : menus) {            checkOneMenuErrors(oneMenu);        }        onlyDrinksError(EventModel.getOrderedMenu());    }"
            },
            {
                "file_path": "E:/f_flow/java-christmas-6-scienceNH/src/main/java/christmas/EventControlError.java",
                "method_name": "EventControlError.checkOneMenuErrors",
                "tree_position": "49-56",
                "cut_tree": "Method: checkOneMenuErrors(String oneMenu)\nBody:\nStatementExpression(expression=MethodInvocation(arguments=[MemberReference(member=oneMenu, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=checkMenuFormError, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[], type_arguments=None), label=None)\nLocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=MethodInvocation(arguments=[MemberReference(member=STRING_LITERALS, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[ArraySelector(index=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=4))])], member=split, postfix_operators=[], prefix_operators=[], qualifier=oneMenu, selectors=[], type_arguments=None), name=menuInfo)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[None], name=String, sub_type=None))\nStatementExpression(expression=MethodInvocation(arguments=[MemberReference(member=menuInfo, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[ArraySelector(index=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0))])], member=checkMenuNameError, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[], type_arguments=None), label=None)\nStatementExpression(expression=MethodInvocation(arguments=[MemberReference(member=menuInfo, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[ArraySelector(index=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=1))])], member=checkMenuCountError, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[], type_arguments=None), label=None)\nStatementExpression(expression=MethodInvocation(arguments=[MemberReference(member=menuInfo, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[ArraySelector(index=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0))])], member=checkMenuDuplicateError, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[], type_arguments=None), label=None)\nStatementExpression(expression=MethodInvocation(arguments=[MemberReference(member=menuInfo, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=setOrderedMenu, postfix_operators=[], prefix_operators=[], qualifier=EventModel, selectors=[], type_arguments=None), label=None)",
                "source_code": "    private static void checkOneMenuErrors(String oneMenu) {        checkMenuFormError(oneMenu);        String[] menuInfo = oneMenu.split(STRING_LITERALS[4]);        checkMenuNameError(menuInfo[0]);        checkMenuCountError(menuInfo[1]);        checkMenuDuplicateError(menuInfo[0]);        EventModel.setOrderedMenu(menuInfo);    }"
            },
            {
                "file_path": "E:/f_flow/java-christmas-6-scienceNH/src/main/java/christmas/EventModel.java",
                "method_name": "EventModel.setOrderedMenu.println",
                "tree_position": "37-42",
                "cut_tree": "Method: setOrderedMenu(String menuInfo)\nBody:\nStatementExpression(expression=MethodInvocation(arguments=[MemberReference(member=menuInfo, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=add, postfix_operators=[], prefix_operators=[], qualifier=orderedMenu, selectors=[], type_arguments=None), label=None)\nStatementExpression(expression=Assignment(expressionl=MemberReference(member=leftMenus, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), type=-=, value=MethodInvocation(arguments=[MemberReference(member=menuInfo, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[ArraySelector(index=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=1))])], member=parseInt, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[], type_arguments=None)), label=None)\nStatementExpression(expression=MethodInvocation(arguments=[BinaryOperation(operandl=MemberReference(member=STRING_LITERALS, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[ArraySelector(index=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0))]), operandr=MemberReference(member=leftMenus, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=+)], member=println, postfix_operators=[], prefix_operators=[], qualifier=System.out, selectors=[], type_arguments=None), label=None)\nStatementExpression(expression=MethodInvocation(arguments=[BinaryOperation(operandl=MemberReference(member=STRING_LITERALS, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[ArraySelector(index=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=1))]), operandr=MemberReference(member=leftMenus, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=+)], member=println, postfix_operators=[], prefix_operators=[], qualifier=System.out, selectors=[], type_arguments=None), label=None)",
                "source_code": "    public static void setOrderedMenu(String[] menuInfo) {        orderedMenu.add(menuInfo);        leftMenus -= parseInt(menuInfo[1]);        System.out.println(STRING_LITERALS[0] + leftMenus);        System.out.println(STRING_LITERALS[1] + leftMenus);    }"
            }
        ]
    }
]